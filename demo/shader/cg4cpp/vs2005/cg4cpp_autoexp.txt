; BEGIN cg4cpp
; Visual Studio 2005 data type visualizers for Cg types provided by "Cg for C++"
; Copyright 2008, NVIDIA Corporation
; This section is AUTOMATICALLY GENERATED by generate_cg4cpp_autoexp.c -- DO NOT EDIT
; Intended to be appended to the end of:
;   C:\Program Files\Microsoft Visual Studio 8\Common7\Packages\Debugger\autoexp.dat
[Visualizer]
; Specialize float and double vectors to use more compact "g" format
Cg::__CGvector<float,*>|Cg::__CGvector_plural<float,*>|Cg::__CGvector_storage<float,*,*> {
  preview(  #array ( expr : [$c.x.v[$i],g], size : $T1 ) )
}
Cg::__CGvector_usage<float,*,*>|Cg::__CGvector_plural_usage<float,*,*> {
  preview(  #array ( expr : [$c.v[$i],g], size : $T1 ) )
}
Cg::__CGswizzle<float,*,*,*>|Cg::__CGswizzle_storage<float,*,*,*> {
  preview( #array ( expr : [$c.v[($T3 >> ($i*8)) & 0xFF],g], size : $T2 ) )
}
Cg::__CGvector<double,*>|Cg::__CGvector_plural<double,*>|Cg::__CGvector_storage<double,*,*> {
  preview(  #array ( expr : [$c.x.v[$i],g], size : $T1 ) )
}
Cg::__CGvector_usage<double,*,*>|Cg::__CGvector_plural_usage<double,*,*> {
  preview(  #array ( expr : [$c.v[$i],g], size : $T1 ) )
}
Cg::__CGswizzle<double,*,*,*>|Cg::__CGswizzle_storage<double,*,*,*> {
  preview( #array ( expr : [$c.v[($T3 >> ($i*8)) & 0xFF],g], size : $T2 ) )
}
Cg::__CGvector<*,*>|Cg::__CGvector_plural<*,*>|Cg::__CGvector_storage<*,*,*> {
  preview(  #array ( expr : $c.x.v[$i], size : $T2 ) )
}
Cg::__CGvector_usage<*,*,*>|Cg::__CGvector_plural_usage<*,*,*> {
  preview(  #array ( expr : $c.v[$i], size : $T2 ) )
}
Cg::__CGswizzle<*,*,*,*>|Cg::__CGswizzle_storage<*,*,*,*> {
  preview( #array ( expr : $c.v[($T4 >> ($i*8)) & 0xFF], size : $T3 ) )
}
Cg::__CGmatrix<*,1,1,*> {
  preview( #( $e._11 ) )
}
Cg::__CGmatrix<*,1,2,*> {
  preview( #( $e._11_12 ) )
}
Cg::__CGmatrix<*,1,3,*> {
  preview( #( $e._11_12_13 ) )
}
Cg::__CGmatrix<*,1,4,*> {
  preview( #( $e._11_12_13_14 ) )
}
Cg::__CGmatrix<*,2,1,*> {
  preview( #( $e._11, "; ", $e._21 ) )
}
Cg::__CGmatrix<*,2,2,*> {
  preview( #( $e._11_12, "; ", $e._21_22 ) )
}
Cg::__CGmatrix<*,2,3,*> {
  preview( #( $e._11_12_13, "; ", $e._21_22_23 ) )
}
Cg::__CGmatrix<*,2,4,*> {
  preview( #( $e._11_12_13_14, "; ", $e._21_22_23_24 ) )
}
Cg::__CGmatrix<*,3,1,*> {
  preview( #( $e._11, "; ", $e._21, "; ", $e._31 ) )
}
Cg::__CGmatrix<*,3,2,*> {
  preview( #( $e._11_12, "; ", $e._21_22, "; ", $e._31_32 ) )
}
Cg::__CGmatrix<*,3,3,*> {
  preview( #( $e._11_12_13, "; ", $e._21_22_23, "; ", $e._31_32_33 ) )
}
Cg::__CGmatrix<*,3,4,*> {
  preview( #( $e._11_12_13_14, "; ", $e._21_22_23_24, "; ", $e._31_32_33_34 ) )
}
Cg::__CGmatrix<*,4,1,*> {
  preview( #( $e._11, "; ", $e._21, "; ", $e._31, "; ", $e._41 ) )
}
Cg::__CGmatrix<*,4,2,*> {
  preview( #( $e._11_12, "; ", $e._21_22, "; ", $e._31_32, "; ", $e._41_42 ) )
}
Cg::__CGmatrix<*,4,3,*> {
  preview( #( $e._11_12_13, "; ", $e._21_22_23, "; ", $e._31_32_33, "; ", $e._41_42_43 ) )
}
Cg::__CGmatrix<*,4,4,*> {
  preview( #( $e._11_12_13_14, "; ", $e._21_22_23_24, "; ", $e._31_32_33_34, "; ", $e._41_42_43_44 ) )
}
; Convert s10e5 16-bit float representation into equivalent print-able float
Cg::__CGcustom_float<10,5,1,0>|Cg::__CGcustom_float_storage<10,5,1> {
  preview(
    ; switch on 5-bit exponent
    #switch(($c.v[1] >> 2) & 0x1f)
    #case 0 (
      ; denorm case so no leading one
      [(float)((((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff)*(1-2*($c.v[1] >> 7))) * 0.000000059604644775390625),g]
    )
    #case 1 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000000059604644775390625),g]
    )
    #case 2 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000000119209289550781250),g]
    )
    #case 3 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000000238418579101562500),g]
    )
    #case 4 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000000476837158203125000),g]
    )
    #case 5 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000000953674316406250000),g]
    )
    #case 6 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000001907348632812500000),g]
    )
    #case 7 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000003814697265625000000),g]
    )
    #case 8 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000007629394531250000000),g]
    )
    #case 9 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000015258789062500000000),g]
    )
    #case 10 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000030517578125000000000),g]
    )
    #case 11 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000061035156250000000000),g]
    )
    #case 12 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000122070312500000000000),g]
    )
    #case 13 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000244140625000000000000),g]
    )
    #case 14 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000488281250000000000000),g]
    )
    #case 15 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.000976562500000000000000),g]
    )
    #case 16 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.001953125000000000000000),g]
    )
    #case 17 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.003906250000000000000000),g]
    )
    #case 18 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.007812500000000000000000),g]
    )
    #case 19 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.015625000000000000000000),g]
    )
    #case 20 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.031250000000000000000000),g]
    )
    #case 21 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.062500000000000000000000),g]
    )
    #case 22 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.125000000000000000000000),g]
    )
    #case 23 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.250000000000000000000000),g]
    )
    #case 24 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 0.500000000000000000000000),g]
    )
    #case 25 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 1.000000000000000000000000),g]
    )
    #case 26 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 2.000000000000000000000000),g]
    )
    #case 27 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 4.000000000000000000000000),g]
    )
    #case 28 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 8.000000000000000000000000),g]
    )
    #case 29 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 16.000000000000000000000000),g]
    )
    #case 30 (
      [(float)(((0x400 | ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff))*(1-2*($c.v[1] >> 7))) * 32.000000000000000000000000),g]
    )
    ; infinity and not-a-number cases
    #case 31 (
      #if ((($c.v[0]) | ($c.v[1] << 8)) & 0x3ff) (
        #if ($c.v[1] & 0x80) (
          "-NaN"
        ) #else (
          "+NaN"
        )
      ) #else (
        #if ($c.v[1] & 0x80) (
          "-Inf"
        ) #else (
          "+Inf"
        )
      )
    )
  )
}
; Convert s1.10 8-bit fixed-point representation into equivalent print-able float
Cg::__CGcustom_fixed<1,10,1>|Cg::__CGcustom_fixed_storage<1,10,1> {
  preview(
    [(((($c.v[0]) | ($c.v[1] << 8)) << 20) >> 20) / 1024.0,g]
  )
}
; Convert u0.8 8-bit fixed-point representation into equivalent print-able float
Cg::__CGcustom_fixed<0,8,0>|Cg::__CGcustom_fixed_storage<0,8,0> {
  preview(
    [$c.v[0] / 255.0,g]
  )
}
Cg::__CGwrap_type<*>|Cg::InOut<*>|Cg::In<*>|Cg::Out<*> {
  preview(
    *(($T1 *)&($c))
  )
}
; END cg4cpp
